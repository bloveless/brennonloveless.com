# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Create and publish a Docker image

on:
  push:
    branches:
    - '*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          - amd64
          - arm64

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.platform }}-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Install OpenVPN
        if: ${{ matrix.platform == 'arm64' }}
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install openvpn

      - name: Setup VPN config
        if: ${{ matrix.platform == 'arm64' }}
        run: |
          echo "${{ secrets.CA_CRT }}" > ca.crt
          echo "${{ secrets.SECRET_USERNAME_PASSWORD }}" > secret.txt

      - name: Connect VPN
        if: ${{ matrix.platform == 'arm64' }}
        run: sudo openvpn --config "$(pwd)/.github/vpn/client.ovpn" --log "vpn.log" --daemon

      - name: Wait for a VPN connection
        if: ${{ matrix.platform == 'arm64' }}
        timeout-minutes: 1
        run: until ping -c1 192.168.4.249; do sleep 2; done

      - name: deploy to cluster
        if: ${{ matrix.platform == 'arm64' }}
        uses: steebchen/kubectl@v2.0.0
        with: # defaults to latest kubectl binary version
          config: ${{ secrets.KUBE_CONFIG }}
          version: v1.22.7
          command: -n brennonloveless-com set image deployment/brennonloveless-com brennonloveless-com=${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.imageid }}

      - name: verify deployment
        if: ${{ matrix.platform == 'arm64' }}
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBE_CONFIG }}
          version: v1.22.7
          command: -n brennonloveless-com rollout status deployment/brennonloveless-com

      - name: Kill VPN connection
        if: ${{ matrix.platform == 'arm64' && always() }}
        run: |
          sudo chmod 777 vpn.log
          sudo killall openvpn

      - name: Upload VPN logs
        uses: actions/upload-artifact@v2
        if: ${{ matrix.platform == 'arm64' && always() }}
        with:
          name: VPN logs
          path: vpn.log
